超大量 数据 更新 ----人工 ROWID 切片 更新


把你脑袋当CBO
    2012年，一美女DBA请求协助优化如下SQL：

SELECT "A1"."CODE", "A1"."DEVICE_ID", "A1"."SIDEB_PORT_ID", "A1"."VERSION"  
  FROM (SELECT   
         "A2"."CODE" "CODE",  
         "A2"."DEVICE_ID" "DEVICE_ID",  
         "A2"."SIDEB_PORT_ID" "SIDEB_PORT_ID",  
         "A3"."VERSION" "VERSION",  
         ROW_NUMBER() OVER(PARTITION BY "A4"."PROD_ID" ORDER BY "A4"."HIST_TIME" DESC) "RN"  
          FROM "RM"."H_PROD_2_RF_SERV"            "A4",  
               "RM"."H_RSC_FACING_SERV_LINE_ITEM" "A3",  
               "RM"."CONNECTOR"                   "A2"  
         WHERE "A4"."SERV_ID" = "A3"."SERV_ID"  
           AND "A3"."LINE_ID" = "A2"."CONNECTOR_ID"  
           AND EXISTS (SELECT 0  
                  FROM "RM"."DEVICE_ITEM" "A5"  
                 WHERE "A5"."DEVICE_ID" = "A2"."DEVICE_ID"  
                   AND "A5"."ITEM_SPEC_ID" = 200006  
                   AND "A5"."VALUE" ='7')  
           AND "A4"."PROD_ID" = 313) "A1"  
 WHERE "A1"."RN" = 1;
 
  执行计划如下：

------------------------------------------------------------------------------------------------------
| Id  | Operation                         | Name                        | Rows  | Bytes | Cost (%CPU)|
------------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                  |                             |     1 |   175 |    20  (10)|
|*  1 |  VIEW                             |                             |     1 |   175 |    20  (10)|
|*  2 |   WINDOW SORT PUSHED RANK         |                             |     1 |   109 |    20  (10)|
|   3 |    NESTED LOOPS                   |                             |     1 |   109 |    19   (6)|
|   4 |     NESTED LOOPS                  |                             |     1 |    80 |    17   (6)|
|   5 |      MERGE JOIN CARTESIAN         |                             |     1 |    60 |    13   (8)|
|   6 |       SORT UNIQUE                 |                             |     1 |    36 |     6   (0)|
|*  7 |        TABLE ACCESS BY INDEX ROWID| DEVICE_ITEM                 |     1 |    36 |     6   (0)|
|*  8 |         INDEX RANGE SCAN          | IDX_DEVICE_ITEM_VALE        |     9 |       |     4   (0)|
|   9 |       BUFFER SORT                 |                             |     4 |    96 |     7  (15)|
|  10 |        TABLE ACCESS BY INDEX ROWID| H_PROD_2_RF_SERV            |     4 |    96 |     6   (0)|
|* 11 |         INDEX RANGE SCAN          | IDX_HP2RS_PRODID_SERVID     |     4 |       |     2   (0)|
|  12 |      TABLE ACCESS BY INDEX ROWID  | H_RSC_FACING_SERV_LINE_ITEM |     2 |    40 |     4   (0)|
|* 13 |       INDEX RANGE SCAN            | IDX_HRFSLI_SERV             |     2 |       |     2   (0)|
|* 14 |     TABLE ACCESS BY INDEX ROWID   | CONNECTOR                   |     1 |    29 |     2   (0)|
|* 15 |      INDEX UNIQUE SCAN            | PK_CONNECTOR                |     1 |       |     1   (0)|
------------------------------------------------------------------------------------------------------
  
Predicate Information (identified by operation id):  
---------------------------------------------------  
  
   1 - filter("A1"."RN"=1)  
   2 - filter(ROW_NUMBER() OVER ( PARTITION BY "A4"."PROD_ID" ORDER BY  
              INTERNAL_FUNCTION("A4"."HIST_TIME") DESC )<=1)  
   7 - filter("A5"."ITEM_SPEC_ID"=200006)  
   8 - access("A5"."VALUE"='7')  
  11 - access("A4"."PROD_ID"=313)  
  13 - access("A4"."SERV_ID"="A3"."SERV_ID")  
  14 - filter("A5"."DEVICE_ID"="A2"."DEVICE_ID")  
  15 - access("A3"."LINE_ID"="A2"."CONNECTOR_ID")  
  
Statistics  
----------------------------------------------------------  
          0  recursive calls  
          0  db block gets  
    2539920  consistent gets  
          0  physical reads  
          0  redo size  
        735  bytes sent via SQL*Net to client  
        492  bytes received via SQL*Net from client  
          2  SQL*Net roundtrips to/from client  
          3  sorts (memory)  
          0  sorts (disk)  
          1  rows processed 
		  
		  
id=5 rows算错了，统计信息错了。

那么接下来，我们分析如何优化他：

1.先看执行计划入口，然后他返回的行数
SELECT COUNT(*)
  FROM "RM"."DEVICE_ITEM" "A5"
 WHERE "A5"."ITEM_SPEC_ID" = 200006
   AND "A5"."VALUE" = '7';

上面查询返回68384行数据

EXISTS ----里面 有 6w多行

2.再看
select count(*) from H_PROD_2_RF_SERV where prod_id = 313;
上面查询返回6行数据

因此需要leading(a4) use_nl(a4,a3)

3.A2有35467304行数据
=>A3 NL A2，这个时候的 A3 是 A4 NL A3的结果集
  




最终改成hint如下：

SELECT "A1"."CODE", "A1"."DEVICE_ID", "A1"."SIDEB_PORT_ID", "A1"."VERSION"
   FROM (SELECT /*+ leading(a4) use_nl(a4,a3) use_nl(a3,a2) */
          "A2"."CODE" "CODE",
          "A2"."DEVICE_ID" "DEVICE_ID",
          "A2"."SIDEB_PORT_ID" "SIDEB_PORT_ID",
          "A3"."VERSION" "VERSION",
          ROW_NUMBER() OVER(PARTITION BY "A4"."PROD_ID" ORDER BY "A4"."HIST_TIME" DESC) "RN"
           FROM "RM"."H_PROD_2_RF_SERV"            "A4",
                "RM"."H_RSC_FACING_SERV_LINE_ITEM" "A3",
                "RM"."CONNECTOR"                   "A2"
          WHERE "A4"."SERV_ID" = "A3"."SERV_ID"
            AND "A3"."LINE_ID" = "A2"."CONNECTOR_ID"
            AND EXISTS (SELECT /*+ hash_sj */ 0
                   FROM "RM"."DEVICE_ITEM" "A5"
                  WHERE "A5"."DEVICE_ID" = "A2"."DEVICE_ID"
                    AND "A5"."ITEM_SPEC_ID" = 200006
                    AND "A5"."VALUE" ='7')
            AND "A4"."PROD_ID" = 313) "A1"
  WHERE "A1"."RN" = 1;


  执行计划如下：

-----------------------------------------------------------------------------------------------------
| Id  | Operation                        | Name                        | Rows  | Bytes | Cost (%CPU)|
-----------------------------------------------------------------------------------------------------
|   0 | SELECT STATEMENT                 |                             |     1 |   175 |    40   (3)|
|*  1 |  VIEW                            |                             |     1 |   175 |    40   (3)|
|*  2 |   WINDOW SORT PUSHED RANK        |                             |     1 |   109 |    40   (3)|
|*  3 |    HASH JOIN SEMI                |                             |     1 |   109 |    39   (0)|
|   4 |     NESTED LOOPS                 |                             |     7 |   511 |    33   (0)|
|   5 |      NESTED LOOPS                |                             |     7 |   308 |    19   (0)|
|   6 |       TABLE ACCESS BY INDEX ROWID| H_PROD_2_RF_SERV            |     4 |    96 |     7   (0)|
|*  7 |        INDEX RANGE SCAN          | IDX_HP2RS_PRODID_SERVID     |     4 |       |     3   (0)|
|   8 |       TABLE ACCESS BY INDEX ROWID| H_RSC_FACING_SERV_LINE_ITEM |     2 |    40 |     4   (0)|
|*  9 |        INDEX RANGE SCAN          | IDX_HRFSLI_SERV             |     2 |       |     2   (0)|
|  10 |      TABLE ACCESS BY INDEX ROWID | CONNECTOR                   |     1 |    29 |     2   (0)|
|* 11 |       INDEX UNIQUE SCAN          | PK_CONNECTOR                |     1 |       |     1   (0)|
|* 12 |     TABLE ACCESS BY INDEX ROWID  | DEVICE_ITEM                 |     1 |    36 |     6   (0)|
|* 13 |      INDEX RANGE SCAN            | IDX_DEVICE_ITEM_VALE        |     9 |       |     4   (0)|
-----------------------------------------------------------------------------------------------------
  
Predicate Information (identified by operation id):  
---------------------------------------------------  
  
   1 - filter("A1"."RN"=1)  
   2 - filter(ROW_NUMBER() OVER ( PARTITION BY "A4"."PROD_ID" ORDER BY  
              INTERNAL_FUNCTION("A4"."HIST_TIME") DESC )<=1)  
   3 - access("A5"."DEVICE_ID"="A2"."DEVICE_ID")  
   7 - access("A4"."PROD_ID"=313)  
   9 - access("A4"."SERV_ID"="A3"."SERV_ID")  
  11 - access("A3"."LINE_ID"="A2"."CONNECTOR_ID")  
  12 - filter("A5"."ITEM_SPEC_ID"=200006)  
  13 - access("A5"."VALUE"='7')  
  
Statistics  
----------------------------------------------------------  
          0  recursive calls  
          0  db block gets  
      14770  consistent gets  
          0  physical reads  
          0  redo size  
        735  bytes sent via SQL*Net to client  
        492  bytes received via SQL*Net from client  
          2  SQL*Net roundtrips to/from client  
          1  sorts (memory)  
          0  sorts (disk)  
          1  rows processed  
  
 秒杀！ 
  
 不看执行计划去搞定SQL：
 1.select count(*) from xxx where xxxxx --for all table,to see who has the min rows
 2.找到驱动表之后， 看它 和谁关联 ，关联之后 count 返回多少行   ----返回行数少 走NL 返回行数多 走HASH 
 
 
 
 
 
 
