 
 两个表关联没有连接条件的时候就会产生笛卡尔笛卡儿积，这种表连接方式就叫笛卡尔笛卡儿(cartesian join)连接。
 
 
    在测试账号scott中，运行如下SQL：

SQL> set autot trace
SQL> select * from emp, dept;

56 rows selected.

Execution Plan
----------------------------------------------------------
Plan hash value: 2034389985

-----------------------------------------------------------------------------
| Id  | Operation            | Name | Rows  | Bytes | Cost (%CPU)| Time     |
-----------------------------------------------------------------------------
|   0 | SELECT STATEMENT     |      |    56 |  3248 |     8   (0)| 00:00:01 |
|   1 |  MERGE JOIN CARTESIAN|      |    56 |  3248 |     8   (0)| 00:00:01 |
|   2 |   TABLE ACCESS FULL  | DEPT |     4 |    80 |     3   (0)| 00:00:01 |
|   3 |   BUFFER SORT        |      |    14 |   532 |     5   (0)| 00:00:01 |
|   4 |    TABLE ACCESS FULL | EMP  |    14 |   532 |     1   (0)| 00:00:01 |
-----------------------------------------------------------------------------

    执行计划中MERGE JOIN CARTESIAN就表示笛卡尔连接。笛卡尔连接会返回两个表的乘积。DEPT有4行数据，EMP有14行数据，两个表进行笛卡尔连接之后会返回56行数据。笛卡尔连接会对两表中其中一个表进行排序，执行计划中的BUFFER SORT就表示排序。

	
	

    在多表关联的时候，两个表没有直接关联条件，但是优化器错误的把某个表返回的Rows算为1行(注意必须是1行)，这个时候也可能发生笛卡尔连接。例如：

SQL> select * from table(dbms_xplan.display());

PLAN_TABLE_OUTPUT
-----------------------------------------------------------------------------
Plan hash value: 710264295
-----------------------------------------------------------------------------
| Id  | Operation                       | Name                      | Rows  |
-----------------------------------------------------------------------------
|   0 | SELECT STATEMENT                |                           |     1 |
|   1 |  WINDOW SORT                    |                           |     1 |
|*  2 |   TABLE ACCESS BY INDEX ROWID   | F_AGT_GUARANTY_INFO_H     |     1 |
|   3 |    NESTED LOOPS                 |                           |     1 |
|   4 |     NESTED LOOPS                |                           |     1 |
|   5 |      MERGE JOIN CARTESIAN       |                           |     1 |
|   6 |       TABLE ACCESS FULL         | B_M_BUSINESS_CONTRACT     |     1 |
|   7 |       BUFFER SORT               |                           | 61507 |
|*  8 |        TABLE ACCESS FULL        | F_AGT_GUARANTY_RELATIVE_H | 61507 |
|   9 |      TABLE ACCESS BY INDEX ROWID| F_CONTRACT_RELATIVE       |     1 |
|* 10 |       INDEX UNIQUE SCAN         | SYS_C0019578              |     1 |
|* 11 |     INDEX RANGE SCAN            | SYS_C005707               |     1 |
-----------------------------------------------------------------------------
 执行计划中Id=6的表和Id=8的表就是进行笛卡尔连接的。
    在这个执行计划中，为什么优化器会选择笛卡尔积连接呢？
    因为Id=6这个表返回的Rows被优化器错误的估算为1行，优化器认为1行的表与任意大小的表进行笛卡尔关联，数据也不会翻翻，优化器认为这是安全的。所以这里优化器选择了笛卡尔连接。
    Id=6这步是全表扫描，并且没过滤条件(因为没有*)，优化器认为它只返回1行。各位读者请思考，全表扫描返回1行，并且无过滤条件，这个可能吗？难道表里面真的就只有1行数据？这不符合常识。
    那么显然是Id=6的表没有收集统计信息，导致优化器默认的把该表算为1行(当时数据库没开启动态采样)。下面是上述执行计划的SQL语句：

SELECT b.agmt_id,
       b.corp_org,
       b.cur_cd,
       b.businesstype,
       c.object_no,
       c.guaranty_crsum,
       row_number() over(PARTITION BY b.agmt_id, b.corp_org, c.object_no ORDER BY b.agmt_id, b.corp_org, c.object_no) row_no
  FROM b_m_business_contract         b, --合同表
       dwf.f_contract_relative       c, --合同关联表
       dwf.f_agt_guaranty_relative_h r, --业务合同、担保合同与担保物关联表
       dwf.f_agt_guaranty_info_h     g --担保物信息表
 WHERE b.corp_org = c.corp_org
   AND b.agmt_id = c.contract_seqno --业务合同号
   AND c.object_type = 'GuarantyContract'
   AND r.start_dt <= DATE '2012-09-17' /*当天日期*/
   AND r.end_dt > DATE '2012-09-17' /*当天日期*/
   AND c.contract_seqno = r.object_no --业务合同号
   AND c.object_no = r.guaranty_no --担保合同编号
   AND c.corp_org = r.corp_org --企业法人编码
   AND r.object_type = 'BusinessContract'
   AND r.agmt_id = g.agmt_id --担保物编号
   AND r.corp_org = g.corp_org --企业法人编码
   AND g.start_dt <= DATE '2012-09-17' /*当天日期*/
   AND g.end_dt > DATE '2012-09-17' /*当天日期*/
   AND g.guarantytype = '020010' --质押存款

    执行计划中进行笛卡尔关联的表就是b和r，在SQL语句中b和r没有直接关联条件。





